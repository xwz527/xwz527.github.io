<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xwz527.github.io</id>
    <title>wenzhengBlog</title>
    <updated>2020-05-02T02:35:57.960Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xwz527.github.io"/>
    <link rel="self" href="https://xwz527.github.io/atom.xml"/>
    <subtitle>Well begun is half done!</subtitle>
    <logo>https://xwz527.github.io/images/avatar.png</logo>
    <icon>https://xwz527.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, wenzhengBlog</rights>
    <entry>
        <title type="html"><![CDATA[springboot之AOP]]></title>
        <id>https://xwz527.github.io/post/springboot-zhi-aop/</id>
        <link href="https://xwz527.github.io/post/springboot-zhi-aop/">
        </link>
        <updated>2020-05-02T02:11:36.000Z</updated>
        <content type="html"><![CDATA[<p>​       面向切面编程（aspect-oriented programming），是一种将横切关注点与业务逻辑分离的编程方式。每个横切关注点都集中在一个地方，而不是分散在多处代码中。这样使我们的服务模块更加简洁，因为它们只包含了主要关注点的代码，而次要的功能或者说辅助的功能被转移到切面中了。比如权限校验、日志记录等可以放在切面处而不是在每个代码块中都重复去写这部分。</p>
<h1 id="术语解释"><strong>术语解释：</strong></h1>
<h2 id="通知advice">通知（Advice）</h2>
<p>Advice 定义了在 pointcut 里面定义的程序点具体要做的操作，比如上面所说的权限校验、日志记录等频繁使用的功能它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</p>
<h2 id="连接点joinpoint">连接点（JoinPoint）</h2>
<p>表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及<a href="https://baike.baidu.com/item/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a>程序块的执行等等。通俗的说就是spring允许你使用通知的地方，基本每个方法的前，后（两者都有也行），或抛出异常时都可以是连接点。</p>
<h2 id="切入点pointcut">切入点（Pointcut）</h2>
<p>表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a>等方式集中起来，它定义了相应的 Advice 将要发生的地方。</p>
<h2 id="切面aspect">切面（Aspect）</h2>
<p>切面是通知和切入点的结合。在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</p>
<h1 id="springboot之aop">SpringBoot之AOP：</h1>
<h2 id="1引入依赖"><strong>1.引入依赖</strong></h2>
   <!--加入SpringBoot-AOP依赖-->
<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
    &lt;/dependency&gt;
</code></pre>
<h2 id="2普通类方法切面类"><strong>2.普通类方法切面类</strong></h2>
<p>@Aspect<br>
@Component<br>
public class AopTestAspect {</p>
<pre><code>/**
 * 1.通配符
 * [*]  匹配任意字符，但只能匹配一个元素
 * [..] 匹配任意字符，可以匹配任意多个元素，表示类时，必须和*联合使用
 * [+]  必须跟在类名后面，如Horseman+，表示类本身和继承或扩展指定类的所有类
 * 切点表达式分为 修饰符  返回类型  包路径  方法名  参数
 * 2.切点表达式
 * 3.逻辑运算符
 * 表达式可由多个切点函数通过逻辑运算组成
 *   &amp;&amp; 与操作，求交集，也可以写成and
 * 例如 execution(* test(..)) &amp;&amp; target(Test)  表示Test及其子类的test方法
 *   || 或操作，任一表达式成立即为true，也可以写成 or
 * 例如 execution(* test(..)) || args(String)  表示名称为chop的方法或者有一个String型参数的方法
 *   ! 非操作，表达式为false则结果为true，也可以写成 not
 * 例如 execution(* test(..)) and !args(String)  表示名称为chop的方法但是不能是只有一个String型参数的方法
 */

/**
 * 切点为TestServiceImpl类下的test方法
 * &quot;execution(* com.example.demo.service.impl.TestServiceImpl.test())&quot;
 *
 * 切点为TestServiceImp类下的所有带任意参数的方法
 */
@Pointcut(&quot;execution(* com.example.demo.service.impl.TestServiceImp.*(..))&quot;)
public void testServicePoc(){
}

/**
 * 环绕通知在 target 开始和结束执行
 * 如果在环绕通知方法中有异常捕获，则会直接捕获异常，不会再向外抛出
 * @param point
 * @return
 */
@Around(value = &quot;testServicePoc()&quot;)
public Object around(ProceedingJoinPoint point) {
    long start = System.currentTimeMillis();
    //获取切点执行的方法
    String methodName = point.getSignature().getName();
    log.info(&quot;around method name: {} params: {}&quot;, methodName, Arrays.asList(point.getArgs()));
    try {
        log.info(&quot;around end time: {}&quot;, (System.currentTimeMillis() - start) + &quot; ms!&quot;);
        return point.proceed();
    } catch (Throwable e) {
        log.error(&quot;message: {}&quot;, e.getMessage());
    }
    return null;
}

/**
 * * 前置通知在 target 前执行
 * @param joinPoint
 */
@Before(value = &quot;testServicePoc()&quot;)
public void beforeMethod(JoinPoint joinPoint) {
    String methodName = joinPoint.getSignature().getName();
    List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());
    log.info(&quot;before inform method name: {} param: {}&quot;, methodName, args);
}

/**
 * 后置通知在target后执行
 *
 * @param joinPoint
 */
@After(value = &quot;testServicePoc()&quot;)
public void afterMethod(JoinPoint joinPoint) {
    String methodName = joinPoint.getSignature().getName();
    List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());
    log.info(&quot;after inform method name : {} param: {}&quot;, methodName, args);
}

/**
 * 在target执行成功返回后执行
 *
 * @param joinPoint
 * @param result
 */
@AfterReturning(value = &quot;testServicePoc()&quot;,returning = &quot;result&quot;)
public void afterReturning(JoinPoint joinPoint, Object result) {
    String methodName = joinPoint.getSignature().getName();
    log.info(&quot;afterReturning inform method name: {} return value: {}&quot;, methodName, result);
}

/**
 * 在target抛出异常后执行
 *
 * @param joinPoint
 * @param ex
 */
  
@AfterThrowing(value = &quot;testServicePoc()&quot;,throwing = &quot;ex&quot;)
public void afterThrowing(JoinPoint joinPoint, Exception ex) {
    String methodName = joinPoint.getSignature().getName();
    log.info(&quot;afterThrowing inform method name: {} exceptions: {}&quot;,methodName, ex);
}
</code></pre>
<p>}</p>
<h2 id="3自定义注解方法切面类">3.<strong>自定义注解方法切面类</strong></h2>
<h3 id="1自定义注解">1.自定义注解</h3>
<figure data-type="image" tabindex="1"><img src="https://xwz527.github.io/post-images/1588385703020.jpg" alt="" loading="lazy"></figure>
<h3 id="2自定义切面类">2.自定义切面类</h3>
<figure data-type="image" tabindex="2"><img src="https://xwz527.github.io/post-images/1588385709498.jpg" alt="" loading="lazy"></figure>
<h1 id="总结">总结</h1>
<ul>
<li>面向切面编程是面向对象编程的一个强大的补充</li>
<li>通过切面可以把分散在应用各处的行为放入可重用的模块中</li>
<li>通过注解显示的声明在什么地方应用该行为</li>
<li>有效减少冗余代码，让我们的类关注自身的主要功能</li>
<li>通过使用@Aspect注解和简单的配置，可以很简单的在Spring中装配advice和pointcut</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github绑定域名]]></title>
        <id>https://xwz527.github.io/post/github-bang-ding-yu-ming/</id>
        <link href="https://xwz527.github.io/post/github-bang-ding-yu-ming/">
        </link>
        <updated>2020-05-01T08:35:44.000Z</updated>
        <content type="html"><![CDATA[<p>#<em>1.在仓库里添加CNAME文件并在文件中填写绑定的域名</em><br>
<img src="https://xwz527.github.io/post-images/1588322642354.jpg" alt="" loading="lazy"><br>
文件内容为自己的域名（格式如：masamoto.top）<br>
#<em>2.添加域名解析</em><br>
ping 自己可访问的http://github.io域名，得到一个IP<br>
<img src="https://xwz527.github.io/post-images/1588322661008.jpg" alt="" loading="lazy"><br>
修改域名解析记录<br>
<img src="https://xwz527.github.io/post-images/1588322682934.jpg" alt="" loading="lazy"><br>
添加两个A记录，用上面得到的IP，一个主机记录为：“www”，一个为“@”<br>
这样通过 <strong>http://masamoto.top/</strong>  就能访问自己的博客了。<br>
😘 Enjoy~</p>
]]></content>
    </entry>
</feed>